import random
import math

round_keys = [None] * 16
pt = ""
def binaryToHex(binaryInput):
    paddedBinary = binaryInput
    while len(paddedBinary) % 4 != 0:
        paddedBinary = "0" + paddedBinary
    hexString = ""
    for i in range(0, len(paddedBinary), 4):
        nibble = paddedBinary[i:i+4]
        hexString += hex(int(nibble, 2))[2:]
    return hexString

def stringToBinary(input):
    binaryString = ""
    for c in input:
        binaryString += bin(ord(c))[2:].zfill(8)
    return binaryString

def stringToHex(input):
    hexString = ""
    for ch in input:
        hexString += hex(ord(ch))[2:]
    return hexString
def hexToString(hexString):
    result = ""
    hex_digits = [hexString[i:i+2] for i in range(0, len(hexString), 2)]
    for hex_digit in hex_digits:
        result += chr(int(hex_digit, 16))
    return result

def binaryToHex(binaryInput):
    paddedBinary = binaryInput
    while len(paddedBinary) % 4 != 0:
        paddedBinary = "0" + paddedBinary
    hexString = ""
    for i in range(0, len(paddedBinary), 4):
        nibble = paddedBinary[i:i+4]
        hexString += hex(int(nibble, 2))[2:]
    return hexString

def binaryToString(binaryInput):
    result = ""
    for i in range(0, len(binaryInput), 8):
        byte = binaryInput[i:i+8]
        result += chr(int(byte, 2))
    return result

def convertDecimalToBinary(decimal):
    binary = ""
    while decimal != 0:
        binary = ("0" if decimal % 2 == 0 else "1") + binary
        decimal = decimal // 2
    while len(binary) < 4:
        binary = "0" + binary
    return binary

def convertBinaryToDecimal(binary):
    decimal = 0
    counter = 0
    size = len(binary)
    for i in range(size-1, -1, -1):
        if binary[i] == '1':
            decimal += math.pow(2, counter)
        counter += 1
    return int(decimal)
    
def shift_left_once(key_chunk):
    shifted = key_chunk[1:] + key_chunk[0]
    return shifted

def shift_left_twice(key_chunk):
    shifted = key_chunk[2:] + key_chunk[0:2]
    return shifted

def Xor(a, b):
    result = ""
    size = len(b)
    for i in range(size):
        if a[i] != b[i]:
            result += "1"
        else:
            result += "0"
    return result

def generate_keys(key):
    pc1 = [
        57,49,41,33,25,17,9,
        1,58,50,42,34,26,18,
        10,2,59,51,43,35,27,
        19,11,3,60,52,44,36,
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14,6,61,53,45,37,29,
        21,13,5,28,20,12,4
    ]
    
    pc2 = [
        14,17,11,24,1,5,
        3,28,15,6,21,10,
        23,19,12,4,26,8,
        16,7,27,20,13,2,
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    ]
    
    perm_key = ""
    for i in range(56):
        perm_key += key[pc1[i] - 1]
    
    left = perm_key[:28]
    right = perm_key[28:]
    
    for i in range(16):
        if i == 0 or i == 1 or i == 8 or i == 15:
            left = shift_left_once(left)
            right = shift_left_once(right)
        else:
            left = shift_left_twice(left)
            right = shift_left_twice(right)
        
        combined_key = left + right
        round_key = ""
        
        for j in range(48):
            round_key += combined_key[pc2[j] - 1]
        round_keys[i] = round_key

def desEnc(block):
    initial_permutation = [
        58,50,42,34,26,18,10,2,
        60,52,44,36,28,20,12,4,
        62,54,46,38,30,22,14,6,
        64,56,48,40,32,24,16,8,
        57,49,41,33,25,17,9,1,
        59,51,43,35,27,19,11,3,
        61,53,45,37,29,21,13,5,
        63,55,47,39,31,23,15,7
    ]
    
    expansion_table = [
        32,1,2,3,4,5,4,5,
        6,7,8,9,8,9,10,11,
        12,13,12,13,14,15,16,17,
        16,17,18,19,20,21,20,21,
        22,23,24,25,24,25,26,27,
        28,29,28,29,30,31,32,1
    ]
    
    substition_boxes = [
        [
            [14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],
            [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
            [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
            [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]
        ],
        [
            [15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
            [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
            [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
            [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7]
        ],
        [
            [10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
            [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
            [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
            [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]
        ],
        [
            [7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
            [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
            [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
            [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]
        ],
        [
            [2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
            [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
            [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
            [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]
        ],
        [
            [12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
            [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
            [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
            [4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1]
        ],
        [
            [4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
            [13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
            [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
            [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]
        ],
        [
            [13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
            [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
            [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12],
            [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]
        ]
    ]
    
    permutation_tab = [
        16,7,20,21,29,12,28,17,
        1,15,23,26,5,18,31,10,
        2,8,24,14,32,27,3,9,
        19,13,30,6,22,11,4,25
    ]
    
    inverse_permutation = [
        40,8,48,16,56,24,64,32,
        39,7,47,15,55,23,63,31,
        38,6,46,14,54,22,62,30,
        37,5,45,13,53,21,61,29,
        36,4,44,12,52,20,60,28,
        35,3,43,11,51,19,59,27,
        34,2,42,10,50,18,58,26,
        33,1,41,9,49,17,57,25
    ]
    
    perm = ""
    #print(f"block: {block} len: {len(block)}")
    for i in range(64):
        perm += block[initial_permutation[i]-1]
    
    left = perm[:32]
    right = perm[32:]
    
    for i in range(16):
        right_expanded = ""
        for j in range(48):
            right_expanded += right[expansion_table[j]-1]
        
        xored = Xor(round_keys[i], right_expanded)
        res = ""
        
        for j in range(8):
            row1 = xored[j*6] + xored[j*6 + 5]
            row = convertBinaryToDecimal(row1)
            col1 = xored[j*6 + 1:j*6 + 5]
            col = convertBinaryToDecimal(col1)
            val = substition_boxes[j][row][col]
            res += convertDecimalToBinary(val)
        
        perm2 = ""
        for j in range(32):
            perm2 += res[permutation_tab[j]-1]
        
        xored = Xor(perm2, left)
        
        left = xored
        if i < 15:
            temp = right
            right = xored
            left = temp
    
    combined_text = left + right
    ciphertext = ""
    
    for i in range(64):
        ciphertext += combined_text[inverse_permutation[i]-1]
    
    return ciphertext

def desDecryption(ciphertext):
    i = 15
    j = 0
    while i > j:
        temp = round_keys[i]
        round_keys[i] = round_keys[j]
        round_keys[j] = temp
        i -= 1
        j += 1
    
    #global pt  # Add this line to use the global variable pt
    #pt = ciphertext
    
    decrypted = desEnc(ciphertext)
    
    return decrypted



def genKey():
    keySize = 64
    keyBits = random.getrandbits(keySize)
    key = bin(keyBits)[2:].zfill(keySize)
    return key
def pad(input_str):
    # Implement padding (e.g., PKCS#7)
    padding_size = 8 - (len(input_str) % 8)
    if padding_size != 8:
        input_str += chr(padding_size) * padding_size
    return input_str





def des_encrypt_text(pt_string):
    padded_pt = pad(pt_string)
    #print(f"Padded: {padded_pt} Len: {len(padded_pt)}")
    blocks = [padded_pt[i:i+8] for i in range(0, len(padded_pt), 8)]
    #print(f"Blocks: {blocks}")

    encrypted_blocks = []
    for block in blocks:
        #global pt
        #pt = stringToBinary(block)
        ct = desEnc(stringToBinary(block))
        encrypted_blocks.append(ct)

    return ''.join(encrypted_blocks)

def des_decrypt_text(ct_string):
    #print(f"CT STRING: {ct_string} len: {(len(ct_string))}")
    blocks = [ct_string[i:i+64] for i in range(0, len(ct_string), 64)]
    decrypted_blocks = []
    for block in blocks:
        #global pt
        #pt = block
        decrypted = desDecryption(block)
        decrypted_blocks.append((decrypted))

    return ''.join(decrypted_blocks).rstrip('\x00')

def remove_custom_padding(hex_input):
    # Convert hex to binary
    binary_input = bin(int(hex_input, 16))[2:]

    # Remove custom padding
    padding_size = int(binary_input[-8:], 2)
    binary_data = binary_input[:-padding_size]

    # Convert binary to ASCII
    ascii_result = ''.join([chr(int(binary_data[i:i+8], 2)) for i in range(0, len(binary_data), 8)])

    return ascii_result



# my_key = genKey()
my_key = "0011011000110100011000100110100101110100010010110110010101111001"
generate_keys(my_key)
# Example usage
ptString = "The quick brown fox jumped over the lazy dog"
# print(f"Plaintext hex: {stringToHex(ptString)}")
encrypted_text = des_encrypt_text((ptString))
print("Encrypted Bin:", encrypted_text)

decrypted_text = des_decrypt_text(encrypted_text)
#print(f"DEcrypted text: {decrypted_text}")
# print("Decrypted Hex:", binaryToHex(decrypted_text))

