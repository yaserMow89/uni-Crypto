#include <iostream>
#include <string>
#include <vector>
#include <random>
#include <cmath>
#include <bitset>

std::vector<std::string> round_keys(16);
std::string pt = "";

std::string binaryToHex(std::string binaryInput) {
    std::string paddedBinary = binaryInput;
    while (paddedBinary.length() % 4 != 0) {
        paddedBinary = "0" + paddedBinary;
    }
    std::string hexString = "";
    for (int i = 0; i < paddedBinary.length(); i += 4) {
        std::string nibble = paddedBinary.substr(i, 4);
        hexString += std::to_string(std::stoi(nibble, nullptr, 2));
    }
    return hexString;
}

std::string stringToBinary(std::string input) {
    std::string binaryString = "";
    for (char c : input) {
        binaryString += std::bitset<8>(c).to_string();
    }
    return binaryString;
}

std::string stringToHex(std::string input) {
    std::string hexString = "";
    for (char ch : input) {
        hexString += std::to_string(ch);
    }
    return hexString;
}

std::string hexToString(std::string hexString) {
    std::string result = "";
    for (int i = 0; i < hexString.length(); i += 2) {
        std::string hex_digit = hexString.substr(i, 2);
        result += static_cast<char>(std::stoi(hex_digit, nullptr, 16));
    }
    return result;
}

std::string binaryToString(std::string binaryInput) {
    std::string result = "";
    for (int i = 0; i < binaryInput.length(); i += 8) {
        std::string byte = binaryInput.substr(i, 8);
        result += static_cast<char>(std::stoi(byte, nullptr, 2));
    }
    return result;
}

std::string convertDecimalToBinary(int decimal) {
    std::string binary = "";
    while (decimal != 0) {
        binary = (decimal % 2 == 0 ? "0" : "1") + binary;
        decimal = decimal / 2;
    }
    while (binary.length() < 4) {
        binary = "0" + binary;
    }
    return binary;
}

int convertBinaryToDecimal(std::string binary) {
    int decimal = 0;
    int counter = 0;
    int size = binary.length();
    for (int i = size - 1; i >= 0; i--) {
        if (binary[i] == '1') {
            decimal += std::pow(2, counter);
        }
        counter += 1;
    }
    return decimal;
}

std::string shift_left_once(std::string key_chunk) {
    std::string shifted = key_chunk.substr(1) + key_chunk[0];
    return shifted;
}

std::string shift_left_twice(std::string key_chunk) {
    std::string shifted = key_chunk.substr(2) + key_chunk.substr(0, 2);
    return shifted;
}

std::string Xor(std::string a, std::string b) {
    std::string result = "";
    int size = b.length();
    for (int i = 0; i < size; i++) {
        if (a[i] != b[i]) {
            result += "1";
        } else {
            result += "0";
        }
    }
    return result;
}

void generate_keys(std::string key) {
    std::vector<int> pc1 = {
        57,49,41,33,25,17,9,
        1,58,50,42,34,26,18,
        10,2,59,51,43,35,27,
        19,11,3,60,52,44,36,
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14,6,61,53,45,37,29,
        21,13,5,28,20,12,4
    };
    std::vector<int> pc2 = {
        14,17,11,24,1,5,
        3,28,15,6,21,10,
        23,19,12,4,26,8,
        16,7,27,20,13,2,
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    };
    std::string perm_key = "";
    for (int i = 0; i < 56; i++) {
        perm_key += key[pc1[i] - 1];
    }
    std::string left = perm_key.substr(0, 28);
    std::string right = perm_key.substr(28);
    for (int i = 0; i < 16; i++) {
        if (i == 0 || i == 1 || i == 8 || i == 15) {
            left = shift_left_once(left);
            right = shift_left_once(right);
        } else {
            left = shift_left_twice(left);
            right = shift_left_twice(right);
        }
        std::string combined_key = left + right;
        std::string round_key = "";
        for (int j = 0; j < 48; j++) {
            round_key += combined_key[pc2[j] - 1];
        }
        round_keys[i] = round_key;
    }
}

std::string desEnc(std::string block) {
    std::vector<int> initial_permutation = {
        58,50,42,34,26,18,10,2,
        60,52,44,36,28,20,12,4,
        62,54,46,38,30,22,14,6,
        64,56,48,40,32,24,16,8,
        57,49,41,33,25,17,9,1,
        59,51,43,35,27,19,11,3,
        61,53,45,37,29,21,13,5,
        63,55,47,39,31,23,15,7
    };
    std::vector<int> expansion_table = {
        32,1,2,3,4,5,4,5,
        6,7,8,9,8,9,10,11,
        12,13,12,13,14,15,16,17,
        16,17,18,19,20,21,20,21,
        22,23,24,25,24,25,26,27,
        28,29,28,29,30,31,32,1
    };
    std::vector<std::vector<std::vector<int>>> substition_boxes = {
        {
            {14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
            {0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
            {4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
            {15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}
        },
        {
            {15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
            {3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
            {13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
            {13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7}
        },
        {
            {10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
            {13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
            {13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
            {1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}
        },
        {
            {7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
            {13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
            {10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
            {3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}
        },
        {
            {2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
            {14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
            {4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
            {11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}
        },
        {
            {12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
            {10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
            {9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
            {4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1}
        },
        {
            {4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
            {13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
            {1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
            {6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}
        },
        {
            {13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
            {1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
            {6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12},
            {13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}
        }
    };
    std::vector<int> permutation_tab = {
        16,7,20,21,29,12,28,17,
        1,15,23,26,5,18,31,10,
        2,8,24,14,32,27,3,9,
        19,13,30,6,22,11,4,25
    };
    std::vector<int> inverse_permutation = {
        40,8,48,16,56,24,64,32,
        39,7,47,15,55,23,63,31,
        38,6,46,14,54,22,62,30,
        37,5,45,13,53,21,61,29,
        36,4,44,12,52,20,60,28,
        35,3,43,11,51,19,59,27,
        34,2,42,10,50,18,58,26,
        33,1,41,9,49,17,57,25
    };
    std::string perm = "";
    
    for (int i = 0; i < 64; i++) {
        perm += block[initial_permutation[i] - 1];
    }
    std::string left = perm.substr(0, 32);
    std::string right = perm.substr(32);
    for (int i = 0; i < 16; i++) {
        std::string right_expanded = "";
        for (int j = 0; j < 48; j++) {
            right_expanded += right[expansion_table[j] - 1];
        }
        std::string xored = Xor(round_keys[i], right_expanded);
        std::string res = "";
        for (int j = 0; j < 8; j++) {
            std::string row1 = xored.substr(j * 6, 1) + xored.substr(j * 6 + 5, 1);
            int row = convertBinaryToDecimal(row1);
            std::string col1 = xored.substr(j * 6 + 1, 4);
            int col = convertBinaryToDecimal(col1);
            int val = substition_boxes[j][row][col];
            res += convertDecimalToBinary(val);
        }
        std::string perm2 = "";
        for (int j = 0; j < 32; j++) {
            perm2 += res[permutation_tab[j] - 1];
        }
        std::string xored_2 = Xor(perm2, left);
        left = xored_2;
        if (i < 15) {
            std::string temp = right;
            right = xored_2;
            left = temp;
        }
    }
    std::string combined_text = left + right;
    std::string ciphertext = "";
    for (int i = 0; i < 64; i++) {
        ciphertext += combined_text[inverse_permutation[i] - 1];
    }
    return ciphertext;
}

std::string desDecryption(std::string ciphertext) {
    int i = 15;
    int j = 0;
    while (i > j) {
        std::string temp = round_keys[i];
        round_keys[i] = round_keys[j];
        round_keys[j] = temp;
        i -= 1;
        j += 1;
    }
    
    std::string decrypted = desEnc(ciphertext);
    return decrypted;
}

std::string genKey() {
    int keySize = 64;
    int keyBits = std::rand() % (1 << keySize);
    std::string key = std::bitset<64>(keyBits).to_string();
    return key;
}

std::string pad(std::string input_str) {
    int padding_size = 8 - (input_str.length() % 8);
    if (padding_size != 8) {
        input_str += std::string(padding_size, static_cast<char>(padding_size));
    }
    return input_str;
}

std::string des_encrypt_text(std::string pt_string) {
    std::string padded_pt = pad(pt_string);
    std::vector<std::string> blocks;
    for (int i = 0; i < padded_pt.length(); i += 8) {
        blocks.push_back(padded_pt.substr(i, 8));
    }
    std::vector<std::string> encrypted_blocks;
    for (std::string block : blocks) {
        std::string ct = desEnc(stringToBinary(block));
        encrypted_blocks.push_back(ct);
    }
    std::string encrypted_text = "";
    for (std::string block : encrypted_blocks) {
        encrypted_text += block;
    }
    return encrypted_text;
}

std::string des_decrypt_text(std::string ct_string) {
    std::vector<std::string> blocks;
    for (int i = 0; i < ct_string.length(); i += 64) {
        blocks.push_back(ct_string.substr(i, 64));
    }
    std::vector<std::string> decrypted_blocks;
    for (std::string block : blocks) {
        std::string decrypted = desDecryption(block);
        decrypted_blocks.push_back(decrypted);
    }
    std::string decrypted_text = "";
    for (std::string block : decrypted_blocks) {
        decrypted_text += block;
    }
    return decrypted_text;
}

std::string remove_custom_padding(std::string hex_input) {
    std::string binary_input = std::bitset<64>(std::stoi(hex_input, nullptr, 16)).to_string();
    int padding_size = std::stoi(binary_input.substr(binary_input.length() - 8), nullptr, 2);
    std::string binary_data = binary_input.substr(0, binary_input.length() - padding_size);
    std::string ascii_result = "";
    for (int i = 0; i < binary_data.length(); i += 8) {
        std::string byte = binary_data.substr(i, 8);
        ascii_result += static_cast<char>(std::stoi(byte, nullptr, 2));
    }
    return ascii_result;
}

int main() {
    
    // std::string my_key = genKey();
    std::string my_key = "0011011000110100011000100110100101110100010010110110010101111001";
    generate_keys(my_key);
    
    std::string ptString = "The quick brown fox jumped over the lazy dog";
    // std::cout << "Plaintext bin: " << stringToBinary(ptString) << std::endl;
    std::string encrypted_text = des_encrypt_text(ptString);
    std::cout << "Ciphertext Bin(C++): " << encrypted_text << std::endl;
    
    std::string decrypted_text = des_decrypt_text(encrypted_text);
    
    // std::cout << "Decrypted bin: " << decrypted_text << std::endl;
    
    return 0;
}


