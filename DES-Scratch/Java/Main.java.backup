import java.util.Random;

public class Main {
    private static String[] round_keys = new String[16];
    private static String pt = "";

    public static void main(String[] args) {
        // String my_key = genKey();
        String my_key = "0011011000110100011000100110100101110100010010110110010101111001";
        generate_keys(my_key);

        String ptString = "The quick brown fox jumped over the lazy dog";
        // System.out.println("Plaintext hex: " + stringToBinary(ptString));
        String encrypted_text = des_encrypt_text(ptString);
        System.out.println("Ciphertext Bin(Java): " + encrypted_text); 
        String decrypted_text = des_decrypt_text(encrypted_text);

        // System.out.println("Decrypted Hex: " + decrypted_text);
    }

    public static String binaryToHex(String binaryInput) {
        String paddedBinary = binaryInput;
        while (paddedBinary.length() % 4 != 0) {
            paddedBinary = "0" + paddedBinary;
        }
        String hexString = "";
        for (int i = 0; i < paddedBinary.length(); i += 4) {
            String nibble = paddedBinary.substring(i, i + 4);
            hexString += Integer.toHexString(Integer.parseInt(nibble, 2));
        }
        return hexString;
    }

    public static String stringToBinary(String input) {
        String binaryString = "";
        for (char c : input.toCharArray()) {
            binaryString += String.format("%8s", Integer.toBinaryString(c)).replace(' ', '0');
        }
        return binaryString;
    }

    public static String stringToHex(String input) {
        String hexString = "";
        for (char ch : input.toCharArray()) {
            hexString += Integer.toHexString((int) ch);
        }
        return hexString;
    }

    public static String hexToString(String hexString) {
        String result = "";
        for (int i = 0; i < hexString.length(); i += 2) {
            String hex_digit = hexString.substring(i, i + 2);
            result += (char) Integer.parseInt(hex_digit, 16);
        }
        return result;
    }

    public static String binaryToString(String binaryInput) {
        String result = "";
        for (int i = 0; i < binaryInput.length(); i += 8) {
            String byteStr = binaryInput.substring(i, i + 8);
            result += (char) Integer.parseInt(byteStr, 2);
        }
        return result;
    }

    public static String convertDecimalToBinary(int decimal) {
        String binary = "";
        while (decimal != 0) {
            binary = (decimal % 2 == 0 ? "0" : "1") + binary;
            decimal = decimal / 2;
        }
        while (binary.length() < 4) {
            binary = "0" + binary;
        }
        return binary;
    }

    public static int convertBinaryToDecimal(String binary) {
        int decimal = 0;
        int counter = 0;
        int size = binary.length();
        for (int i = size - 1; i >= 0; i--) {
            if (binary.charAt(i) == '1') {
                decimal += Math.pow(2, counter);
            }
            counter += 1;
        }
        return decimal;
    }

    public static String shift_left_once(String key_chunk) {
        String shifted = key_chunk.substring(1) + key_chunk.charAt(0);
        return shifted;
    }

    public static String shift_left_twice(String key_chunk) {
        String shifted = key_chunk.substring(2) + key_chunk.substring(0, 2);
        return shifted;
    }

    public static String Xor(String a, String b) {
        String result = "";
        int size = b.length();
        for (int i = 0; i < size; i++) {
            if (a.charAt(i) != b.charAt(i)) {
                result += "1";
            } else {
                result += "0";
            }
        }
        return result;
    }

    public static void generate_keys(String key) {
        int[] pc1 = {
            57, 49, 41, 33, 25, 17, 9,
            1, 58, 50, 42, 34, 26, 18,
            10, 2, 59, 51, 43, 35, 27,
            19, 11, 3, 60, 52, 44, 36,
            63, 55, 47, 39, 31, 23, 15,
            7, 62, 54, 46, 38, 30, 22,
            14, 6, 61, 53, 45, 37, 29,
            21, 13, 5, 28, 20, 12, 4
        };
        int[] pc2 = {
            14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32
        };
        String perm_key = "";
        for (int i = 0; i < 56; i++) {
            perm_key += key.charAt(pc1[i] - 1);
        }
        String left = perm_key.substring(0, 28);
        String right = perm_key.substring(28);
        for (int i = 0; i < 16; i++) {
            if (i == 0 || i == 1 || i == 8 || i == 15) {
                left = shift_left_once(left);
                right = shift_left_once(right);
            } else {
                left = shift_left_twice(left);
                right = shift_left_twice(right);
            }
            String combined_key = left + right;
            String round_key = "";
            for (int j = 0; j < 48; j++) {
                round_key += combined_key.charAt(pc2[j] - 1);
            }
            round_keys[i] = round_key;
        }
    }

    public static String desEnc(String block) {
        int[] initial_permutation = {
            58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9, 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7
        };
        int[] expansion_table = {
            32, 1, 2, 3, 4, 5, 4, 5,
            6, 7, 8, 9, 8, 9, 10, 11,
            12, 13, 12, 13, 14, 15, 16, 17,
            16, 17, 18, 19, 20, 21, 20, 21,
            22, 23, 24, 25, 24, 25, 26, 27,
            28, 29, 28, 29, 30, 31, 32, 1
        };
        int[][][] substition_boxes = {
            {
                {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
                {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
                {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
                {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
            },
            {
                {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
                {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
                {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
                {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}
            },
            {
                {10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
                {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
                {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
                {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}
            },
            {
                {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
                {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
                {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
                {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}
            },
            {
                {2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
                {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
                {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
                {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}
            },
            {
                {12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
                {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
                {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
                {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}
            },
            {
                {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
                {13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
                {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
                {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}
            },
            {
                {13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
                {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
                {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12},
                {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
            }
        };
        int[] permutation_tab = {
            16, 7, 20, 21, 29, 12, 28, 17,
            1, 15, 23, 26, 5, 18, 31, 10,
            2, 8, 24, 14, 32, 27, 3, 9,
            19, 13, 30, 6, 22, 11, 4, 25
        };
        int[] inverse_permutation = {
            40, 8, 48, 16, 56, 24, 64, 32,
            39, 7, 47, 15, 55, 23, 63, 31,
            38, 6, 46, 14, 54, 22, 62, 30,
            37, 5, 45, 13, 53, 21, 61, 29,
            36, 4, 44, 12, 52, 20, 60, 28,
            35, 3, 43, 11, 51, 19, 59, 27,
            34, 2, 42, 10, 50, 18, 58, 26,
            33, 1, 41, 9, 49, 17, 57, 25
        };
        String perm = "";

        for (int i = 0; i < 64; i++) {
            perm += block.charAt(initial_permutation[i] - 1);
        }
        String left = perm.substring(0, 32);
        String right = perm.substring(32);
        for (int i = 0; i < 16; i++) {
            String right_expanded = "";
            for (int j = 0; j < 48; j++) {
                right_expanded += right.charAt(expansion_table[j] - 1);
            }
            String xored = Xor(round_keys[i], right_expanded);
            String res = "";
            for (int j = 0; j < 8; j++) {
                String row1 = xored.charAt(j * 6) + "" + xored.charAt(j * 6 + 5);
                int row = convertBinaryToDecimal(row1);
                String col1 = xored.substring(j * 6 + 1, j * 6 + 5);
                int col = convertBinaryToDecimal(col1);
                int val = substition_boxes[j][row][col];
                res += convertDecimalToBinary(val);
            }
            String perm2 = "";
            for (int j = 0; j < 32; j++) {
                perm2 += res.charAt(permutation_tab[j] - 1);
            }
            xored = Xor(perm2, left);
            left = xored;
            if (i < 15) {
                String temp = right;
                right = xored;
                left = temp;
            }
        }
        String combined_text = left + right;
        String ciphertext = "";
        for (int i = 0; i < 64; i++) {
            ciphertext += combined_text.charAt(inverse_permutation[i] - 1);
        }
        return ciphertext;
    }

    public static String desDecryption(String ciphertext) {
        int i = 15;
        int j = 0;
        while (i > j) {
            String temp = round_keys[i];
            round_keys[i] = round_keys[j];
            round_keys[j] = temp;
            i -= 1;
            j += 1;
        }

        String decrypted = desEnc(ciphertext);
        return decrypted;
    }

    public static String genKey() {
        int keySize = 64;
        long keyBits = new Random().nextLong() & ((1L << keySize) - 1);
        String key = Long.toBinaryString(keyBits);
        while (key.length() < keySize) {
            key = "0" + key;
        }
        return key;
    }

    public static String pad(String input_str) {
        int padding_size = 8 - (input_str.length() % 8);
        if (padding_size != 8) {
            input_str += new String(new char[padding_size]).replace("\0", (char) padding_size + "");
        }
        return input_str;
    }

    public static String des_encrypt_text(String pt_string) {
        String padded_pt = pad(pt_string);

        String[] blocks = new String[padded_pt.length() / 8];
        for (int i = 0; i < padded_pt.length(); i += 8) {
            blocks[i / 8] = padded_pt.substring(i, i + 8);
        }

        String[] encrypted_blocks = new String[blocks.length];
        for (int i = 0; i < blocks.length; i++) {
            String block = blocks[i];

            String ct = desEnc(stringToBinary(block));
            encrypted_blocks[i] = ct;
        }
        return String.join("", encrypted_blocks);
    }

    public static String des_decrypt_text(String ct_string) {
        String[] blocks = new String[ct_string.length() / 64];
        for (int i = 0; i < ct_string.length(); i += 64) {
            blocks[i / 64] = ct_string.substring(i, i + 64);
        }

        String[] decrypted_blocks = new String[blocks.length];
        for (int i = 0; i < blocks.length; i++) {
            String block = blocks[i];

            String decrypted = desDecryption(block);
            decrypted_blocks[i] = decrypted;
        }
        return String.join("", decrypted_blocks).replaceAll("\0+$", "");
    }

    public static String remove_custom_padding(String hex_input) {
        String binary_input = Long.toBinaryString(Long.parseLong(hex_input, 16));

        int padding_size = Integer.parseInt(binary_input.substring(binary_input.length() - 8), 2);
        String binary_data = binary_input.substring(0, binary_input.length() - padding_size);

        StringBuilder ascii_result = new StringBuilder();
        for (int i = 0; i < binary_data.length(); i += 8) {
            String byteStr = binary_data.substring(i, i + 8);
            ascii_result.append((char) Integer.parseInt(byteStr, 2));
        }
        return ascii_result.toString();
    }
}


